<?xml version="1.0"?>
<launch>

  <!-- Namespace arguments -->
  <arg name="ns_guidance"   default="guidance"/>
  <arg name="ns_controller" default="controllers"/>
  <arg name="ns_rm"         default="rm"/>
  <arg name="ns_thrust"     default="thrust"/>

  <!-- Configuration parameters -->
  <param name="/velocity_controller/odometry_topic" value="/odometry/filtered" />
  <param name="/velocity_controller/thrust_topic" value="/auv/thruster_manager/input" />
  <rosparam command="load" file="$(find vtf_guidance_and_control)/config/beluga.yaml" />

  <!-- Static transforms (needed for VTF controller)-->
  <node pkg="tf2_ros" type="static_transform_publisher" name="odom_ned_frame_publisher"
    args="0 0 0 1.5707963267948966 0 3.141592653589793 odom odom_ned" />
    
  <group if="$(eval type == 'simulator')">
    <node pkg="tf2_ros" type="static_transform_publisher" name="odom_world_frame_publisher"
    args="0 0 0 0 0 0 odom world" />    
  </group>


  <!-- Guidance nodes -->
  <group ns="$(arg ns_guidance)">
    <node pkg="interface"          type="guidance_interface.py"   name="interface"    output="screen"/>
    <node pkg="joystick_guidance"  type="joystick_guidance.py"    name="joystick"     output="screen"/>
    <node pkg="vel_guidance"       type="vel_guidance_node"       name="vel_guidance" output="screen"/>
    <node pkg="dp_guidance"        type="dp_guidance.py"          name="dp"           output="screen"/>
    <node pkg="los_guidance"       type="los_guidance_node.py"    name="los"          output="screen"/>
  </group>

  <!-- Reference model nodes (please review syntax)-->
  <group ns="$(arg ns_rm)">
    <node pkg="dp_reference_model"  type="dp_reference_model_node"      name="dp_reference_model"   output="screen"/>
    <node pkg="los_reference_model" type="los_reference_model_node.py"  name="los_reference_model"  output="screen" />
  </group>

  <!-- Controller nodes -->
  <group ns="$(arg ns_controller)">
    <node pkg="los_controller"      type="los_controller_node.py"     name="los_controller"       output="screen"/>
    <node pkg="dp_controller"       type="dp_controller_node"         name="dp_controller"        output="screen"/>
    <node pkg="velocity_controller" type="velocity_controller_node"   name="velocity_controller"  output="screen"/>
    <node pkg="vtf_guidance_and_control" type="vtf_server.py"     name="vtf_server"   output="screen"/>
  </group>

  <!-- Thrust nodes -->
  <group ns="$(arg ns_thrust)">
    <group if="$(eval type == 'simulator')">
      <remap from="/thrust/desired_forces" to="/auv/thruster_manager/input" />
      <node pkg="thrust_merger"       type="thrust_merger_node"          name="thrust_merger"/>
    </group>

    <group if="$(eval type == 'real')">
      <node pkg="thruster_allocator"  type="thruster_allocator_node"     name="thruster_allocator"/>
      <node pkg="thrust_merger"       type="thrust_merger_node"          name="thrust_merger"/>
    </group>

    
  </group>

</launch>
